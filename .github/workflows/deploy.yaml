name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Code validation and testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pylint black

    - name: Lint with pylint
      run: |
        pylint --disable=C0111,C0103,C0303,C0330,C0326 --max-line-length=120 src/

    - name: Format check with black
      run: |
        black --check src/

    - name: Run tests
      run: |
        pytest tests/

  # Build Docker images
  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push API Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        build-args: |
          SERVICE=api
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/object-detection-api:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/object-detection-api:latest

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/object-detection-frontend:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/object-detection-frontend:latest

  # Deploy to AWS
  deploy-aws:
    needs: build
    if: github.event_name == 'push' || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      ECR_REPOSITORY: object-detection
      ECS_CLUSTER: object-detection-cluster
      ECS_SERVICE: object-detection-service
      ECS_TASK_DEFINITION: .aws/task-definition.json

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: object-detection-api
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Update API URL in frontend
      run: |
        echo "REACT_APP_API_URL=https://api.object-detection.example.com" > ./frontend/.env

    - name: Deploy frontend to S3
      run: |
        cd frontend
        npm install
        npm run build
        aws s3 sync build/ s3://object-detection-frontend --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  # Deploy to Google Cloud Platform (alternative)
  deploy-gcp:
    needs: build
    if: github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy object-detection-api \
          --image ${{ secrets.DOCKERHUB_USERNAME }}/object-detection-api:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated
        
        API_URL=$(gcloud run services describe object-detection-api --platform managed --region us-central1 --format 'value(status.url)')
        
        echo "REACT_APP_API_URL=$API_URL" > ./frontend/.env
        
        cd frontend
        npm install
        npm run build
        
        gsutil -m rsync -r -d build gs://object-detection-frontend-staging
        
        gcloud compute url-maps invalidate-cdn-cache object-detection-cdn \
          --path "/*" \
          --async