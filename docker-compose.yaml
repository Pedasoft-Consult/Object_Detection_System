version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=api
    image: object-detection-api:latest
    container_name: object-detection-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./logs/api:/app/logs
    environment:
      - ENVIRONMENT=production
      - MODEL_PATH=/app/models/final/model.onnx
      - LOG_LEVEL=INFO
      - MAX_REQUEST_SIZE=10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - object-detection-network

  # Training Service (Only activated when needed)
  training:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SERVICE=training
        - CUDA_VERSION=11.6.2
    image: object-detection-training:latest
    container_name: object-detection-training
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - ENVIRONMENT=production
      - CUDA_VISIBLE_DEVICES=0
      - CONFIG_PATH=/app/config/config.yaml
    # GPU support
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["python", "-m", "src.train"]
    networks:
      - object-detection-network
    profiles:
      - training

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: object-detection-frontend:latest
    container_name: object-detection-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - api
    environment:
      - API_URL=http://api:8000
    networks:
      - object-detection-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - object-detection-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - object-detection-network
    profiles:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:

networks:
  object-detection-network:
    driver: bridge